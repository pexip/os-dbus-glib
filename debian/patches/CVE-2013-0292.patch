From 166978a09cf5edff4028e670b6074215a4c75eca Mon Sep 17 00:00:00 2001
From: Colin Walters <walters@verbum.org>
Date: Thu, 14 Feb 2013 15:19:34 +0000
Subject: CVE-2013-0292: dbus-gproxy: Verify sender of NameOwnerChanged signals to be o.f.DBus

Anyone can hop on the bus and emit a signal whose interface is
o.f.DBus; it's expected at the moments that clients (and notably DBus
libraries) check the sender.

This could previously be used to trick a system service using dbus-glib
into thinking a malicious signal came from a privileged source, by
claiming that ownership of the privileged source's well-known name had
changed from the privileged source's real unique name to the attacker's
unique name.

[altered to be NULL-safe so it won't crash on peer connections -smcv]
Signed-off-by: Simon McVittie <simon.mcvittie@collabora.co.uk>
Reviewed-by: Simon McVittie <simon.mcvittie@collabora.co.uk>
---
Index: dbus-glib-0.98/dbus/dbus-gproxy.c
===================================================================
--- dbus-glib-0.98.orig/dbus/dbus-gproxy.c	2013-02-22 15:35:05.647528552 -0500
+++ dbus-glib-0.98/dbus/dbus-gproxy.c	2013-02-22 15:35:05.643528552 -0500
@@ -1249,8 +1249,11 @@
       GSList *tmp;
       const char *sender;
 
+      sender = dbus_message_get_sender (message);
+
       /* First we handle NameOwnerChanged internally */
-      if (dbus_message_is_signal (message,
+      if (g_strcmp0 (sender, DBUS_SERVICE_DBUS) == 0 &&
+	  dbus_message_is_signal (message,
 				  DBUS_INTERFACE_DBUS,
 				  "NameOwnerChanged"))
 	{
@@ -1279,8 +1282,6 @@
 	    }
 	}
 
-      sender = dbus_message_get_sender (message);
-
       /* dbus spec requires these, libdbus validates */
       g_assert (dbus_message_get_path (message) != NULL);
       g_assert (dbus_message_get_interface (message) != NULL);
